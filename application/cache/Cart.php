<?php

/**
 * Created by PhpStorm.
 * User: Gowtham
 * Date: 3/2/2016
 * Time: 11:55 AM
 */
class Cart extends CI_Controller
{
    public function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
        $this->load->library('cart');
        $this->load->library('wishlist');
        $this->load->library('compare');
        $this->load->model('product_model','pro');
        $this->load->model("category_model","cat");
        $this->load->model("manufacturer_model","menu");
        $this->load->model('company_model','com');
        $this->load->model('Customer','cus');
        $this->load->helper('text');
    }

    function index(){
        $this->load->view('cart');
    }

    function add(){
        $url = base_url();
        $pro = $this->pro->getBy(array('id'=> $this->input->post('id_product') ) , 1 );
        if( is_object($pro) ){
            $this->rowid = $this->cart->in_cart($pro->id) ;

            if( is_null( $this->rowid ) ){
                $this->cart->insert(
                    array(
                        'id'      => $pro->id ,
                        'qty'     => $this->input->post('qty') ,
                        'price'   => $pro->price ,
                        'name'    => $pro->title ,
                        'options' => array('code' => $pro->code, 'image' => $pro->image )
                    )
                );
                $this->updateDB();
            }else{
                $this->update();
            }
            $result = $this->info();
        }else{
            $result = array('info' => 'Something goes wrong !!! ');
        }
        echo json_encode( $result );
    }

    function updateCart(){

    }

    function updateQtyForCart(){
        $this->rowid = $this->rowid  ?  $this->rowid  : $this->input->get_post('rowid') ;

        $proId = $this->cart->in_cart($this->rowid  , 'rowid','id');
        $qty = $this->pro->getStock($proId)->qty ;

        if($qty >= $this->input->get_post('qty') ) {
            $data = array(
                'rowid' =>   $this->rowid ,
                'qty'   => $this->input->get_post('qty')
            );
            $this->cart->update($data);
            $this->updateDB();
            $result =$this->info() ;
        }else{
            $result = array( "hasError" => 1 , 'errors' => array(" Selected Quantity is grater then the available quantity  ") );
        }

        echo json_encode($result);
    }

    function update(){
        $this->rowid = $this->rowid  ?  $this->rowid  : $this->input->get_post('rowid') ;
        $data = array(
            'rowid' =>   $this->rowid ,
            'qty'   => $this->input->get_post('qty')
        );
        $this->cart->update($data);
        $this->updateDB();
    }

    function remove(){
        $data = array(
            'rowid' => $this->input->post_get('rowid'),
            'qty'   => 0
        );
        $this->cart->update($data);
        echo json_encode($this->info());
    }


    function updateDB($field='cart'){
        if($this->session->has_userdata('front_user')) {
            $cus = $this->session->userdata('front_user');
            $this->cus->update(array($field => json_encode($this->$field->contents()) ) , "id=".$cus['id']);
        }
    }


    function add_to_wish_list(){

        $url = base_url();

        $pro = $this->pro->getBy(array('id'=> $this->input->get_post('id_product') ) , 1 );

        if( is_object($pro) ){

            $this->wishlist->insert(
                array(
                    'id'      => $pro->id ,
                    'qty'     => 1 ,
                    'price'   => $pro->price ,
                    'name'    => $pro->title ,
                    'options' => array('code' => $pro->code, 'image' => $pro->image )
                )
            );
            $this->updateDB('wishlist');
        }
    }

    function update_to_wish_list(){
        $data = array(
            'rowid' => $this->input->post('key'),
            'qty'   => $this->input->post('quantity')
        );

        $this->wishlist->update($data);
        $this->updateDB('wishlist');
    }

    function remove_to_wish_list(){
        $data = array(
            'rowid' => $this->input->get_post('rowid'),
            'qty'   => 0
        );

        $this->wishlist->update($data);
        $this->updateDB('wishlist');
        if( $this->input->get_post('back') )
            redirect($this->input->get_post('back')) ;
    }


    function add_to_compare(){
        $pro = $this->pro->getBy(array('id'=> $this->input->get_post('product_id') ) , 1 );

        if( is_object($pro) ){
            $rowid = $this->compare->in_cart($pro->id) ;
            if( is_null( $rowid) ){
                if( count($this->compare->contents()) < 3){
                    echo $this->compare->insert(
                        array(
                            'id'      => $pro->id ,
                            'qty'     => 1 ,
                            'price'   => $pro->price ,
                            'name'    => $pro->title ,
                            'options' => array('code' => $pro->code, 'image' => $pro->image )
                        )
                    ) ? 1 : 0;
                }else
                    echo 0 ;
            }else{
               echo $this->compare->update(array(
                    'rowid' => $rowid ,
                    'qty'   => 0
                ))? 1 : 0;
            }

        }else{
            echo 0 ;
        }

    }

    function update_to_compare(){
        $data = array(
            'rowid' => $this->input->post('key'),
            'qty'   => $this->input->post('quantity')
        );

        $this->compare->update($data);
    }

    function remove_to_compare(){
        $data = array(
            'rowid' => $this->input->get_post('rowid'),
            'qty'   => 0
        );

        $this->compare->update($data);
        if( $this->input->get_post('back') )
            redirect($this->input->get_post('back')) ;
    }


    function info(){
        $result['products'] = array();
        foreach($this->cart->contents() as $item ):
        $result['products'][] = array(
            "id" => $item['id']   ,
            "rowid" => $item['rowid']   ,
            "link" => base_url()."product_detail/".url_title($item['name'])."/{$item['id']}",
            "quantity"=> $item['qty'] ,
            "image" => base_url()."uploads/{$item['options']['image']}",
            "image_cart" => base_url()."uploads/thumbs/{$item['options']['image']}",
            "priceByLine"=> $item['price']  ,
            "name" => $item['name'] ,
            "price" => $this->cart->format_number($item['price'])  ,
            "sub_total" => $this->cart->format_number($item['subtotal'])  ,
            "price_float" => $item['price'],
            "idCombination" => 1 ,
            "idAddressDelivery" => 0 ,
            "is_gift"=> false ,
            "hasAttributes"=>false
        );
        endforeach;

        $result = array_merge($result,array(
            "total"=> $this->cart->format_number($this->cart->total()) ,
            "productTotal"=> $this->cart->format_number($this->cart->total()) ,
            "nbTotalProducts" => count($this->cart->contents())
        ));
        return $result ;
    }

    function infoSummery(){
        $result['products'] = array();
        foreach($this->cart->contents() as $item ):
        $result['products'][] = array(
            "id_product" => $item['id']   ,
            "rowid" => $item['rowid']   ,
            "link" => base_url()."product_detail/".url_title($item['name'])."/{$item['id']}",
            "quantity"=> $item['qty'] ,
            "image" => base_url()."uploads/{$item['options']['image']}",
            "image_cart" => base_url()."uploads/thumbs/{$item['options']['image']}",
            "priceByLine"=> $item['price']  ,
            "name" => $item['name'] ,
            "price" => $this->cart->format_number($item['price'])  ,
            "price_float" => $item['price'],
            "idCombination" => 1 ,
            "idAddressDelivery" => 0 ,
            "is_gift"=> false ,
            "hasAttributes"=>false
        );
        endforeach;

        $result = array_merge($result,array(
            "total_products"=> $this->cart->format_number($this->cart->total()) ,
            "productTotal"=> $this->cart->format_number($this->cart->total()) ,
            "nbTotalProducts" => count($this->cart->contents())
        ));
        return $result ;
    }

    function wishlist(){
        if( $this->input->get('rowid') ) {
            $data = array(
                'rowid' => $this->input->get('rowid'),
                'qty'   => 0
            );
            $this->wishlist->update($data);
            $this->updateDB('wishlist');
            redirect(current_url());
        }
        $d['category'] = $this->cat->getBy(array('status !=' => 2 ));
        $d['manufacturer'] = $this->menu->getBy(array('status !=' => 2 ));
        $d['company'] = $this->com->getBy(array('status !=' => 2 ));
        $this->load->view('wishlist',$d);
    }

    function compare(){


        if( $this->input->get('remove') ) {
            $data = array(
                'rowid' => $this->input->get('remove'),
                'qty'   => 0
            );
            $this->compare->update($data);
            redirect(current_url());
        }

        $d['detail_page'] = true ;
        $this->load->view('compare',$d);
    }

    function refresh(){
        echo json_encode( array( "compared_products" => count($this->compare->contents()) ,"wishlist_products"=> count($this->wishlist->contents())) );
    }

    function order(){

        $d['category'] = $this->cat->getBy(array('status ' => 1 ,"category_id" => 0 ) , null , "id,title,short,image,icon" );
        foreach($d['category'] as &$cat  ) {
            $cat->sub = $this->cat->getBy(array('status' => 1 ,"category_id" => $cat->id ) , null , "id,title"  );
            $cat->pro = $this->pro->getProList($cat->id  , "id , title , image  , price , discount"  );
        }

        $view = $this->input->get_post("step") ? $this->input->get_post("step") : 0 ;

        switch($view) {
            case 1 : break;
            case 2 :
                if(count( $this->cart->contents() )  == 0  ) {
                    $this->session->set_flashdata('notification',  array('error' => " Your Cart is Empty"  ) );
                    redirect( base_url()."cart/order" ) ;
                }
                if($this->session->has_userdata("front_user"))  {
                    redirect(current_url()."?step=4");
                }else{
                    $this->load->view('cart_sign_in',$d);
                }
                break;
            case 3 :
                if(count( $this->cart->contents() )  == 0  ) {
                    $this->session->set_flashdata('notification',  array('error' => " Your Cart is Empty"  ) );
                    redirect( base_url()."cart/order" ) ;
                }
                $user = $this->session->userdata("front_user") ;
                $d['cus'] = $this->cus->getBy(array('id'=> $user['id']  ) , 1 ) ;
                $d['state'] = $this->db->from('oc_zone')->where("country_id",173) ->get()->result();
                $this->load->view('cart_address',$d);
                break;
            case 4 :
                $d['state'] = $this->db->from('oc_zone')->where("country_id",173) ->get()->result();
                if(count( $this->cart->contents() )  == 0  ) {
                    $this->session->set_flashdata('notification',  array('error' => " Your Cart is Empty"  ) );
                    redirect( base_url()."cart/order" ) ;
                }
                $user = $this->session->userdata("front_user") ;
                $d['cus'] = $this->cus->getBy(array('id'=> $user['id']  ) , 1 ) ;
                $this->load->view('cart_shipping',$d);
                break;
            case 5 :
                if($this->input->post('shipping')) {
                    $this->session->set_userdata("front_user",$this->input->post()) ;
                    redirect(current_url()."?step=5");
                }
                $this->load->view('payment_type',$d);
                break;
            case 6 :
                if(count( $this->cart->contents() )  == 0  ) {
                    $this->session->set_flashdata('notification',  array('error' => " Your Cart is Empty"  ) );
                    redirect( base_url()."cart/order" ) ;
                }
                if($this->input->post('payment')) {
                    $this->session->set_userdata("payment",$this->input->post('payment')) ;
                    redirect(current_url()."?step=6");
                }else{
                    $this->load->model('order');
                    $this->order->create();
                    if($this->session->userdata("payment") == 2 ){
                        $order = $this->order->getByOrderId($this->order->id);
                        $d['order'] = $order ;
                        $d['orders'] = $this->order->getByCustomerId($order->customer_id);
                        $d['customer'] = $this->cus->getBy( array('id' => $order->customer_id ) , 1 );

                        ob_start();
                        $this->load->view('inc/order_detail_email',$d);
                        $mge = ob_get_contents();
                        ob_clean();

                        $this->load->library('email');
                        $config['mailtype'] = 'html';
                        $this->email->initialize($config);
                        $this->email->from(EMAIL, PROJECT_TITLE);
                        $this->email->to($d['customer']->email  );
                        $this->email->cc(EMAIL);

                        $this->email->subject('Order Details');
                        $this->email->message($mge);
                        $this->email->send();

                        $this->cart->destroy();

                        redirect(base_url()."cart/order_detail/".$this->order->id);

                    }else {
                        $d['action']	= 'https://migs.mastercard.com.au/vpcpay';

                        $found_secret = 'A2C0520989919CA223313C5A7C32CFC9';

                        $d['payment']['vpc_Version'] 		= '1';
                        $d['payment']['vpc_Command'] 		= 'pay';
                        $d['payment']['vpc_MerchTxnRef'] 	= $this->order->id . '_' . time();
                        $d['payment']['vpc_AccessCode'] 	= '36DB66D7';
                        $d['payment']['vpc_Merchant'] 		= 'DB91611';
                        $d['payment']['vpc_OrderInfo'] 		= $this->order->id;
                        $d['payment']['vpc_Amount'] 		= 100*$this->cart->total();
                        $d['payment']['vpc_Locale'] 		= 'en';
                        $d['payment']['vpc_ReturnURL'] 		= base_url().'cart/callback';

                        ksort($d['payment']);

                        $hash = trim($found_secret);
                        foreach ($d['payment'] as $field) {
                            $hash .= $field;
                        }
                        $md5hash = md5($hash);

                        $d['payment']['vpc_SecureHash'] 	= $md5hash;


                        $this->load->view('conformation',$d);
                    }
                }
            break;
            default :
                $this->load->view('shopping_cards',$d);
                break;
        }
    }

    function callback(){

        $this->cart->destroy();
        $d['category'] = $this->cat->getBy(array('status ' => 1 ,"category_id" => 0 ) , null , "id,title,short,image,icon" );
        foreach($d['category'] as &$cat  ) {
            $cat->sub = $this->cat->getBy(array('status' => 1 ,"category_id" => $cat->id ) , null , "id,title"  );
            $cat->pro = $this->pro->getProList($cat->id  , "id , title , image  , price , discount"  );
        }

        $this->load->model('order');
        $order = $this->order->getByOrderId($this->input->get("vpc_OrderInfo"));
        if( is_object($order) ) {
            $this->order->confirm($order->id );
            $d['order'] = $order ;
            $d['orders'] = $this->order->getByCustomerId($order->customer_id);
            $d['customer'] = $this->cus->getBy( array('id' => $order->customer_id ) , 1 );
            // If we get a successful response back...
            if (isset($_GET['vpc_TxnResponseCode'])) {
                switch($_GET['vpc_TxnResponseCode']) {
                    case '0':
                        // put post values in session for success page
                        $d['success']['Order Info'] = $this->input->get('vpc_OrderInfo');
                        $d['success']['Receipt No'] = $this->input->get('vpc_ReceiptNo');
                        $d['success']['Transaction No'] = $this->input->get('vpc_TransactionNo');
                        $d['success']['Status Message'] = $this->input->get('vpc_Message');

                        ob_start();
                        $this->load->view('inc/order_detail_email',$d);
                        $mge = ob_get_contents();
                        ob_clean();

                        $this->load->library('email');
                        $config['mailtype'] = 'html';
                        $this->email->initialize($config);
                        $this->email->from(EMAIL, PROJECT_TITLE);
                        $this->email->to($d['customer']->email  );
                        $this->email->cc(EMAIL);

                        $this->email->subject('Order Details');
                        $this->email->message($mge);
                        $this->email->send();

                        break;
                    default:
                        if (isset($_GET['vpc_Message'])) {
                            $d['error'] = (urldecode($_GET['vpc_Message']))  ;
                        } else {
                            $d['error']  = " Transaction Failure ";
                        }
                }
            } else {
                if (isset($_GET['vpc_Message'])) {
                    $d['error'] = (urldecode($_GET['vpc_Message']))  ;
                } else {
                    $d['error']  = " Transaction Failure ";
                }
            }



            $this->load->view('order_history',$d);
        }else {
             show_404();
        }

    }

    function order_detail($id){
        $d['category'] = $this->cat->getBy(array('status ' => 1 ,"category_id" => 0 ) , null , "id,title,short,image,icon" );
        foreach($d['category'] as &$cat  ) {
            $cat->sub = $this->cat->getBy(array('status' => 1 ,"category_id" => $cat->id ) , null , "id,title"  );
            $cat->pro = $this->pro->getProList($cat->id  , "id , title , image  , price , discount"  );
        }

        $this->load->model('order');
        $order = $this->order->getByOrderId($id);

        if(is_object($order) ) {
            $d['orders'] = $this->order->getByCustomerId($order->customer_id);
            $d['customer'] = $this->cus->getBy( array('id' => $order->customer_id ) , 1 );
            $d['order'] = $order;
            $this->load->view('order_history',$d);
//            $this->load->view('inc/order_detail_email',$d);
        }else{
            show_404();
        }

    }

}



/*



<form action="https://migs.mastercard.com.au/vpcpay" method="get" id="checkout-form">
      <input type="hidden" name="vpc_AccessCode" value="36DB66D7">
      <input type="hidden" name="vpc_Amount" value="57000">
      <input type="hidden" name="vpc_Command" value="pay">
      <input type="hidden" name="vpc_Locale" value="en">
      <input type="hidden" name="vpc_MerchTxnRef" value="116_1459935664">
      <input type="hidden" name="vpc_Merchant" value="DB91611">
      <input type="hidden" name="vpc_OrderInfo" value="116">
      <input type="hidden" name="vpc_ReturnURL" value="http://exfastgroup.com/index.php?route=payment/migs_gateway/callback">
      <input type="hidden" name="vpc_Version" value="1">
      <input type="hidden" name="vpc_SecureHash" value="32678494a4171f5cb15d9db11f6bb5bf">
  </form>


$this->data['action'] 						= 'https://migs.mastercard.com.au/vpcpay';

			$this->data['fields']['vpc_Version'] 		= '1';
			$this->data['fields']['vpc_Command'] 		= 'pay';
			$this->data['fields']['vpc_MerchTxnRef'] 	= $this->session->data['order_id'] . '_' . time();
			$this->data['fields']['vpc_AccessCode'] 	= $found_key;
			$this->data['fields']['vpc_Merchant'] 		= $found_mid;
			$this->data['fields']['vpc_OrderInfo'] 		= $this->session->data['order_id'];
			$this->data['fields']['vpc_Amount'] 		= str_replace(array(',00','.00','.0', ',0'), '', (100*$this->currency->format($order_info['total'], $currency, FALSE, FALSE)));
			$this->data['fields']['vpc_Locale'] 		= 'en';
			$this->data['fields']['vpc_ReturnURL'] 		= (HTTPS_SERVER . 'index.php?route=payment/' . $classname . '/callback');

			ksort($this->data['fields']);

			$hash = trim($found_secret);
			foreach ($this->data['fields'] as $field) {
				$hash .= $field;
			}
			$md5hash = md5($hash);

			$this->data['fields']['vpc_SecureHash'] 	= $md5hash;


*/