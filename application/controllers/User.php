<?php

/**
 * Created by PhpStorm.
 * User: Gowtham
 * Date: 3/1/2016
 * Time: 3:51 PM
 */
class User extends CI_Controller
{
    public function __construct() {
        parent::__construct(); // TODO: Change the autogenerated stub
        $this->load->model('product_model','pro');
        $this->load->model('Slider_model','slider');
        $this->load->model("category_model","cat");
        $this->load->model("manufacturer_model","menu");
        $this->load->model('company_model','com');
        $this->load->model('Customer','cus');
        $this->load->library('wishlist');
        $this->load->library('compare');
        $this->load->helper('text');
        $this->load->library('cart');
        $this->load->library('user_agent');
        $this->load->model("banner_model","banner");
    }

    function index(){
        if( ! $this->session->has_userdata("front_user") ) {
            redirect(base_url()."user/signin");
        }

        $cus = $this->session->userdata("front_user") ;

        $cus = $this->cus->getBy( array('id' => $cus['id'] ) , 1  ) ;
        if(! is_object($cus)) show_404("Your Login have some error ");
        $d['top'] = $this->banner->getBy(array( 'status'=>1 , 'position' => 1 ) , 1 , null , array('order_by'=>'id DESC') );
        $d['customer'] = $cus ;

        $d['category'] = $this->cat->getBy(array('status ' => 1 ,"category_id" => 0 ) , null , "id,title,short,image,icon" );
        foreach($d['category'] as &$cat  ) {
            $cat->sub = $this->cat->getBy(array('status' => 1 ,"category_id" => $cat->id ) , null , "id,title"  );
        }



        $this->load->view('account',$d);
    }

    function compare(){
        $d['top'] = $this->banner->getBy(array( 'status'=>1 , 'position' => 1 ) , 1 , null , array('order_by'=>'id DESC') );

        $d['category'] = $this->cat->getBy(array('status ' => 1 ,"category_id" => 0 ) , null , "id,title,short,image,icon" );
        foreach($d['category'] as &$cat  ) {
            $cat->sub = $this->cat->getBy(array('status' => 1 ,"category_id" => $cat->id ) , null , "id,title"  );
        }
        $this->load->view('compare',$d);
    }

    function wishlist(){
        if( ! $this->session->has_userdata("front_user") ) {
            redirect(base_url()."user/signin");
        }
        $d['top'] = $this->banner->getBy(array( 'status'=>1 , 'position' => 1 ) , 1 , null , array('order_by'=>'id DESC') );

        $d['category'] = $this->cat->getBy(array('status ' => 1 ,"category_id" => 0 ) , null , "id,title" );
        foreach($d['category'] as &$cat  ) {
            $cat->sub = $this->cat->getBy(array('status' => 1 ,"category_id" => $cat->id ) , null , "id,title"  );
        }
        $this->load->view('wishlist',$d);
    }

    function register(){
        $d['top'] = $this->banner->getBy(array( 'status'=>1 , 'position' => 1 ) , 1 , null , array('order_by'=>'id DESC') );

        $this->form_validation->set_rules('password', 'Password', 'required|min_length[5]');
        $this->form_validation->set_rules('email', 'Email', 'required');

        if ($this->form_validation->run() == TRUE){
             $data = $this->input->post() ;
             unset($data['step']);
             unset($data['back']);
             unset($data['submitAccount']);
             $id = $this->cus->create( $data );
             if( $id  ){
               // $this->session->set_flashdata('notification',  array('error' => "Your Account Not Verified Yet Please Check your email "  ) );
                 $this->session->set_userdata("front_user", array('id'=>$id   ) );
             }else{
                 $this->session->set_flashdata('error', ' Register Failure Please Try Again !!!');
             }
             if($this->input->post('back'))
                 redirect($this->input->post('back'));
             redirect(base_url()."user/address");
         }else{
             if($this->input->post()){
                 $this->session->set_flashdata('error', validation_errors() );
                 $d['result'] = (object)$this->input->post();
             }
         }

    }

    function address(){
        $d['top'] = $this->banner->getBy(array( 'status'=>1 , 'position' => 1 ) , 1 , null , array('order_by'=>'id DESC') );

        $this->form_validation->set_rules('firstname', 'First Name', 'required');
        $this->form_validation->set_rules('lastname', 'Last Name', 'required');
        $this->form_validation->set_rules('address1', 'Primary Address', 'required');
        $this->form_validation->set_rules('ZoneId', 'Zone', 'required');
        $this->form_validation->set_rules('CityId', 'City', 'required');


        if ($this->form_validation->run() == TRUE){
            $data = $this->input->post() ;
            unset($data['step']);
            unset($data['back']);
            $user = $this->session->userdata("front_user") ;
            $this->cus->update( $data , "id = ".$user['id'] );
            if($this->input->post('back'))
                redirect($this->input->post('back'));
            redirect(base_url()."user/shipping");
        }else{
            if($this->input->post('step')){
                $this->form_validation->set_error_delimiters('<div class="error">', '</div>');
                $this->session->set_flashdata('notification',  array('error' =>  validation_errors()  ) );
                redirect($this->input->post('step'));
            }
        }


    }

    function email_check_ajax(){
        $d['top'] = $this->banner->getBy(array( 'status'=>1 , 'position' => 1 ) , 1 , null , array('order_by'=>'order_no DESC') );

        if($this->input->get_post("ajax")) {

            $this->form_validation->set_rules('email_create', 'Email', 'required');

            if($this->form_validation->run()) {
                $cus = $this->cus->getBy(array( 'email' => $this->input->post('email_create')    ) , 1 );
                if(is_object($cus)) {
                    echo json_encode(
                        array(
                            'errors' => array("An account using this email address has already been registered. Please enter a valid password or request a new one."),
                            'hasError' => true ,
                            'page' =>  ""
                        )
                    );
                }else{
                    ob_start();
                    $d['email'] = $this->input->post('email_create')  ;
                    $this->load->view("inc/cart_create_account",$d);
                    $content = ob_get_contents();
                    ob_clean();
                    echo json_encode(
                        array(
                            'errors' => array( ),
                            'hasError' => false ,
                            'page' => $content
                        )
                    );
                }
            }else{
                $this->form_validation->set_error_delimiters('<div class="error">', '</div>');
                echo json_encode(
                    array(
                        'errors' => array(validation_errors()),
                        'hasError' => true ,
                        'page' =>  ""
                    )
                );
            }
            exit;
        }
    }

    function account(){
        if(! $this->session->has_userdata('front_user')){
            redirect(base_url()."user/signin");
        }
    }

    function signin(){
        $d['top'] = $this->banner->getBy(array( 'status'=>1 , 'position' => 1 ) , 1 , null , array('order_by'=>'id DESC') );

        $d['category'] = $this->cat->getBy(array('status ' => 1 ,"category_id" => 0 ) , null , "id,title,short,image,icon" );
        foreach($d['category'] as &$cat  ) {
            $cat->sub = $this->cat->getBy(array('status' => 1 ,"category_id" => $cat->id ) , null , "id,title"  );
        }

        $this->form_validation->set_rules('password', 'Password', 'required');
        $this->form_validation->set_rules('email', 'Email', 'required');

        if($this->form_validation->run()) {
            $cus = $this->cus->getBy(array( 'email' => $this->input->post('email') , 'password' => $this->input->post('password')   ) , 1 );

            if(is_object($cus)) {
                $this->session->set_userdata("front_user", array('id'=>$cus->id   ) );
                if($this->input->get("back")) {
                    redirect($this->input->get("back")."?checkout=3");
                }
                redirect($this->input->post('redirect'));
            }else{
                $this->session->set_flashdata('notification',  array('error' => "<i class=\"material-design-cancel19\"></i>Warning: No match for E-Mail Address and/or Password."  ) );
            }
        }else{
            if($this->input->post()){
                $this->session->set_flashdata('notification',  array('error' => "<i class=\"material-design-cancel19\"></i>Warning: No match for E-Mail Address and/or Password."  ) );
            }
        }
        $this->load->view('sign_in',$d);
    }

    function logout(){
        $this->session->sess_destroy();
        redirect(base_url()."user/signin");
    }

    function country(){
        $country = $this->db->from('oc_country')->where("country_id",$this->input->get('country_id')) ->get()->row();
        $country->zone = $this->db->from('oc_zone')->where("country_id",$this->input->get('country_id')) ->get()->result();
        echo json_encode($country);
    }

    function history(){
        $d['top'] = $this->banner->getBy(array( 'status'=>1 , 'position' => 1 ) , 1 , null , array('order_by'=>'id DESC') );
        $d['category'] = $this->cat->getBy(array('status ' => 1 ,"category_id" => 0 ) , null , "id,title,short,image,icon" );
        foreach($d['category'] as &$cat  ) {
            $cat->sub = $this->cat->getBy(array('status' => 1 ,"category_id" => $cat->id ) , null , "id,title"  );
            $cat->pro = $this->pro->getProList($cat->id  , "id , title , image  , price , discount"  );
        }
        if( ! $this->session->has_userdata("front_user") ) {
            redirect(base_url()."user/signin");
        }
        $cus = $this->session->userdata("front_user") ;

        $this->load->model('order');
        $d['orders'] = $this->order->getByCustomerId($cus['id']);
        $d['customer'] = $this->cus->getBy( array('id' => $cus['id']) , 1 );
        $this->load->model("zone_model");
        $this->load->model("city_model");
        $d['customer']->Zone = $this->zone_model->getBy(["ZoneId"=>$d['customer']->ZoneId],1)->Zone;
        $d['customer']->City = $this->city_model->getBy(["CityId"=>$d['customer']->CityId],1)->City;

        $this->load->view('order_history',$d);
    }

    function edit(){
        if( ! $this->session->has_userdata("front_user") ) {
            redirect(base_url()."user/signin");
        }
        $cus = $this->session->userdata("front_user") ;
        $d['top'] = $this->banner->getBy(array( 'status'=>1 , 'position' => 1 ) , 1 , null , array('order_by'=>'id DESC') );
        $d['category'] = $this->cat->getBy(array('status ' => 1 ,"category_id" => 0 ) , null , "id,title,short,image,icon" );
        foreach($d['category'] as &$cat  ) {
            $cat->sub = $this->cat->getBy(array('status' => 1 ,"category_id" => $cat->id ) , null , "id,title"  );
            $cat->pro = $this->pro->getProList($cat->id  , "id , title , image  , price , discount"  );
        }

        $d['customer'] = $this->cus->getBy( array('id' => $cus['id']) , 1 );
        $this->form_validation->set_error_delimiters('<div class="error">', '</div>');
        $this->form_validation->set_rules('firstname', 'First Name', 'required');
        $this->form_validation->set_rules('lastname', 'Last Name', 'required');
        $this->form_validation->set_rules('address1', 'Primary Address', 'required');
        $this->form_validation->set_rules('ZoneId', 'Zone', 'required');
        $this->form_validation->set_rules('CityId', 'City', 'required');
        /*
        $this->form_validation->set_rules('city', 'City', 'required');
        $this->form_validation->set_rules('postcode', 'Postcode', 'required');
        $this->form_validation->set_rules('state', 'State', 'required');
        */
        $this->form_validation->set_rules('password', 'Password', 'required|min_length[5]');
        $this->form_validation->set_rules('email', 'Email', 'required');

        if( $this->form_validation->run() ) {
            if( $this->cus->update( $this->input->post() , "id=".$cus['id'] )  ){
                $this->session->set_flashdata('valid', ' Successfully Saved ');
            }else{
                $this->session->set_flashdata('error', 'Record Insert Failure !!!');
            }
            redirect(current_url());


        }else{
            if($this->input->post()){
                $d['customer'] = (object) $this->input->post();
                $this->session->set_flashdata('error', validation_errors() );
            }
        }

//        $this->load->model("zone_model");
        $this->load->model("city_model");

//        $d['customer']->Zone = $this->zone_model->getBy(["ZoneId"=>$d['customer']->ZoneId],1)->Zone;
        $d['city'] = $this->city_model->getBy(['Status'=>1]);

        $this->load->model("zone_model","zone");
        $d['state'] = $this->zone->getBy(['Status'=>1]);

//        p($d['city']);exit;

        $this->load->view('edit_account',$d);
    }

    function forget_password(){

        $this->form_validation->set_rules('email', 'Email', 'required|valid_email');


        if( $this->form_validation->run() ) {
            $cus = $this->cus->changePassword($this->input->post('email')) ;

            if(  is_object($cus)  ){
                $this->session->set_flashdata('valid', ' Your Password Changed successfully ...  Check You Email for New Password ');
                ob_start();
                $this->load->view('inc/password-rest-template',array( 'customer' => $cus ));
                $mge = ob_get_contents();
                ob_clean();
                $this->load->library('email');
                $config['mailtype'] = 'html';
                $this->email->initialize($config);
                $this->email->from(EMAIL, PROJECT_TITLE);
                $this->email->to( $this->input->post('email')  );
                $this->email->subject('Password Reset');
                $this->email->message($mge);
                $this->email->send();

            }else{
                $this->session->set_flashdata('error', ' Sorry This Email Doesn\'s exist  ');
            }
         //   redirect(current_url());


        }else{
            if($this->input->post()){
                $d['email'] =  $this->input->post('email');
                $this->session->set_flashdata('error', validation_errors() );
            }
        }
        $d['top'] = $this->banner->getBy(array( 'status'=>1 , 'position' => 1 ) , 1 , null , array('order_by'=>'id DESC') );
        $d['category'] = $this->cat->getBy(array('status ' => 1 ,"category_id" => 0 ) , null , "id,title,short,image,icon" );
        foreach($d['category'] as &$cat  ) {
            $cat->sub = $this->cat->getBy(array('status' => 1 ,"category_id" => $cat->id ) , null , "id,title"  );
            $cat->pro = $this->pro->getProList($cat->id  , "id , title , image  , price , discount"  );
        }

        $this->load->view('forget_password',$d);
    }

}